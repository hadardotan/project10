import os, os.path, JackAnalyzer.JackTokenizer
from xml.sax.saxutils import escape


# Effects the actual compilation output. Gets its input from a JackTokenizer
# and emits its parsed structure into an output file/stream. The output is
# generated by a series of compilexxx() routines, one for every syntactic
# element xxx of the Jack grammar. The contract between these routines is
# that each compilexxx() routine should read the syntactic construct xxx
# from the input, advance() the tokenizer exactly beyond xxx, and output
# the parsing of xxx. Thus, compilexxx()may only be called if indeed xxx
# is the next syntactic element of the input.


class CompilationEngine(object):
    def __init__(self, input_file):
        """
        Creates a new compilation engine with the
        given input and output. The next routine
        called must be compileClass().
        :param input_file:
        """
        self.tokenizer = JackAnalyzer.JackTokenizer.JackTokenizer(input_file)

        return

    def compile_class(self):
        """
        Compiles a complete class.
        :return:
        """
    def compile_class_var_dec(self):
        """
        Compiles a static declaration or a field
        declaration.
        :return:
        """
    def compile_subroutine(self):
        """
        Compiles a complete method, function, or constructor.
        :return:
        """

    def compile_parameter_list(self):
        """
        Compiles a (possibly empty) parameter list,
        not including the enclosing “()”.

        :return:
        """
    def compile_var_dec(self):
        """
        Compiles a var declaration.
        :return:
        """

    def compile_statements(self):
        """
        Compiles a sequence of statements, not
        including the enclosing “{}”.
        :return:
        """

    def compile_do(self):
        """
        Compiles a do statement
        :return:
        """

    def compile_let(self):
        """
        Compiles a let statement.
        """

    def compile_while(self):
        """
        Compiles a while statement.
        :return:
        """

    def compile_return(self):
        """
        Compiles a return statement.
        :return:
        """

    def compile_if(self):
        """
        Compiles an if statement, possibly with a trailing else clause.
        :return:
        """

    def compile_expression(self):
        """
        Compiles an expression.
        :return:
        """

    def compile_term(self):
        """
        Compiles a term. This routine is faced with a slight difficulty when
        trying to decide between some of the alternative parsing rules.
        Specifically, if the current token is an identifier, the routine must
        distinguish between a variable, an array entry, and a subroutine call.
        A single look-ahead token, which may be one of “[“, “(“, or “.”
        suffices to distinguish between the three possibilities.
        Any other token is not part of this term and should not be advanced
        over.
        :return:
        """

    def compile_expression_list(self):
        """
        Compiles a (possibly empty) comma separated list of expressions.
        :return:
        """

